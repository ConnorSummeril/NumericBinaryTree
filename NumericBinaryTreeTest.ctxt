#BlueJ class context
comment0.target=NumericBinaryTreeTest
comment0.text=\r\n\ Tests\ for\ NumericBinaryTree.\r\n\ @author\ \ Dr.\ Jody\ Paul\r\n\ @version\ $Revision\:\ 7\ $\ ($LastChangedDate\:\ 2016-08-17\ 17\:57\:55\ -0600\ (Wed,\ 17\ Aug\ 2016)\ $\ by\ $Author\:\ jody\ $)\r\n
comment1.params=
comment1.target=NumericBinaryTree\ generateStandardTestTree()
comment1.text=\r\n\ Generates\ a\ standard\ tree\ for\ testing.\r\n\ @return\ testing\ tree\r\n
comment10.params=
comment10.target=void\ emptyTreeSetRightChildException()
comment10.text=\r\n\ Verifies\ exception\ for\ right\ child\ mutator\ on\ empty\ tree.\r\n
comment11.params=
comment11.target=void\ emptyTreeNumberOfLeavesException()
comment11.text=\r\n\ Verifies\ exception\ for\ numberOfLeaves\ accessor\ on\ empty\ tree.\r\n
comment12.params=
comment12.target=void\ oneNodeTest()
comment12.text=\r\n\ Tests\ for\ single-node\ tree.\r\n
comment13.params=
comment13.target=void\ oneNodeSecondaryTest()
comment13.text=\r\n\ Tests\ for\ single-node\ tree\ using\ parameterized\ constructor.\r\n
comment14.params=
comment14.target=void\ multiNodeConstructionTest()
comment14.text=\r\n\ Tests\ for\ multiple-node\ tree\ using\ parameterized\ constructor.\r\n
comment15.params=
comment15.target=void\ mutationTest()
comment15.text=\r\n\ Tests\ for\ proper\ tree\ modification.\r\n
comment16.params=
comment16.target=void\ illegalValueConstructorException()
comment16.text=\r\n\ Verifies\ exception\ for\ null\ value\ on\ non-empty\ tree\ construction.\r\n
comment17.params=
comment17.target=void\ treeToString()
comment17.text=\r\n\ Checks\ string\ rendering.\r\n\ Note\ that\ since\ no\ particular\ string\ rendering\ was\ specified,\r\n\ any\ returned\ string\ that\ satisfies\ the\ loose\ specification\ must\r\n\ be\ accepted.\r\n\ That\ is,\ the\ string\ must\ not\ be\ null,\ must\ not\ be\ empty,\r\n\ and\ must\ contain\ renderings\ of\ all\ of\ the\ values\ present\r\n\ in\ the\ tree.\r\n
comment18.params=
comment18.target=void\ preorderValuesTest()
comment18.text=\r\n\ Checks\ values\ returned\ by\ preorder\ traversal.\r\n
comment19.params=
comment19.target=void\ inorderValuesTest()
comment19.text=\r\n\ Checks\ values\ returned\ by\ inorder\ traversal.\r\n
comment2.params=
comment2.target=NumericBinaryTree\ generateSearchTree()
comment2.text=\r\n\ Generates\ a\ binary\ search\ tree.\r\n\ @return\ testing\ search\ tree\r\n
comment20.params=
comment20.target=void\ postorderValuesTest()
comment20.text=\r\n\ Checks\ values\ returned\ by\ postorder\ traversal.\r\n
comment21.params=
comment21.target=void\ preorderNodesTest()
comment21.text=\r\n\ Checks\ nodes\ returned\ by\ preorder\ traversal.\r\n
comment22.params=
comment22.target=void\ inorderNodesTest()
comment22.text=\r\n\ Checks\ nodes\ returned\ by\ inorder\ traversal.\r\n
comment23.params=
comment23.target=void\ postorderNodesTest()
comment23.text=\r\n\ Checks\ nodes\ returned\ by\ postorder\ traversal.\r\n
comment24.params=
comment24.target=void\ iteratorTest()
comment24.text=\r\n\ Checks\ iterator;\ no\ specific\ order\ assumed.\r\n
comment25.params=nbt
comment25.target=java.util.List\ listOfSubtreesInPreorder(NumericBinaryTree)
comment25.text=\r\n\ Support\ for\ iterator\ test.\r\n\ Returns\ a\ list\ of\ subtrees\ in\ the\ order\ in\ which\r\n\ \ \ they\ would\ be\ visited\ using\ preorder\ traversal.\r\n\ @param\ nbt\ the\ tree\ under\ test\r\n\ @return\ all\ subtrees\ in\ preorder\r\n
comment26.params=nbt1\ nbt2
comment26.target=boolean\ compareTrees(NumericBinaryTree,\ NumericBinaryTree)
comment26.text=\r\n\ Utility\ to\ compare\ two\ trees\ for\ shape\ and\ contents.\r\n\ @param\ nbt1\ first\ tree\ for\ comparison\r\n\ @param\ nbt2\ second\ tree\ for\ comparison\r\n\ @return\ true\ if\ and\ only\ if\ both\ are\ non-null,\r\n\ \ \ \ \ \ have\ the\ same\ number\ of\ nodes\ and\ same\ height,\r\n\ \ \ \ \ \ and\ if\ non-empty\ then\ also\ have\r\n\ \ \ \ \ \ equal\ root\ values,\ and\ if\ present\r\n\ \ \ \ \ \ both\ the\ left\ children\ and\ right\ children\r\n\ \ \ \ \ \ also\ return\ true\ to\ this\ predicate\r\n
comment27.params=
comment27.target=void\ serializationDefaultEmptyTest()
comment27.text=\r\n\ Verfies\ round-trip\ serialization-deserialization\r\n\ of\ empty\ tree\ to\ default\ filename.\r\n
comment28.params=
comment28.target=void\ serializationEmptyTest()
comment28.text=\r\n\ Verfies\ round-trip\ serialization-deserialization\r\n\ of\ empty\ tree\ to\ filename\ passed\ as\ parameter.\r\n
comment29.params=
comment29.target=void\ serializationNonemptyTest()
comment29.text=\r\n\ Verfies\ round-trip\ serialization-deserialization\r\n\ of\ nonempty\ tree\ to\ filename\ passed\ as\ parameter.\r\n
comment3.params=
comment3.target=void\ emptyTreeTest()
comment3.text=\r\n\ Tests\ valid\ methods\ for\ empty\ tree.\r\n
comment30.params=
comment30.target=void\ serializationDefaultNonemptyTest()
comment30.text=\r\n\ Verfies\ round-trip\ serialization-deserialization\r\n\ of\ nonempty\ tree\ to\ default.\r\n
comment31.params=
comment31.target=void\ equalsNullTest()
comment31.text=\r\n\ Verfies\ inequality\ of\ null.\r\n
comment32.params=
comment32.target=void\ equalsOtherClassTest()
comment32.text=\r\n\ Verfies\ inequality\ with\ object\ of\ difference\ class.\r\n
comment33.params=
comment33.target=void\ equalsMTTest()
comment33.text=\r\n\ Verfies\ equality\ of\ empty\ trees.\r\n
comment34.params=
comment34.target=void\ equalsRootOnlyTest()
comment34.text=\r\n\ Verfies\ equality\ of\ trees\ with\ only\ a\ root.\r\n
comment35.params=
comment35.target=void\ equalsStandardTest()
comment35.text=\r\n\ Verfies\ equality\ of\ arbitrary\ trees.\r\n
comment36.params=
comment36.target=void\ hashCodeTest()
comment36.text=\r\n\ Verifies\ hashcode\ meets\ equals\ contract.\r\n
comment37.params=
comment37.target=void\ valuesTest()
comment37.text=\r\n\ Verifies\ behavior\ of\ values()\ method.\r\n
comment4.params=
comment4.target=void\ emptyTreeGetValueException()
comment4.text=\r\n\ Verifies\ exception\ for\ value\ accessor\ on\ empty\ tree.\r\n
comment5.params=
comment5.target=void\ emptyTreeGetLeftChildException()
comment5.text=\r\n\ Verifies\ exception\ for\ left\ child\ accessor\ on\ empty\ tree.\r\n
comment6.params=
comment6.target=void\ emptyTreeGetRightChildException()
comment6.text=\r\n\ Verifies\ exception\ for\ right\ child\ accessor\ on\ empty\ tree.\r\n
comment7.params=
comment7.target=void\ emptyTreeIsLeafException()
comment7.text=\r\n\ Verifies\ exception\ for\ leaf\ predicate\ on\ empty\ tree.\r\n
comment8.params=
comment8.target=void\ emptyTreeSetValueException()
comment8.text=\r\n\ Verifies\ exception\ for\ value\ mutator\ on\ empty\ tree.\r\n
comment9.params=
comment9.target=void\ emptyTreeSetLeftChildException()
comment9.text=\r\n\ Verifies\ exception\ for\ left\ child\ mutator\ on\ empty\ tree.\r\n
numComments=38
