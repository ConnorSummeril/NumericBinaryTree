#BlueJ class context
comment0.target=NumericBinaryTree
comment0.text=\r\n\ A\ simple\ binary\ tree\ whose\ root\ holds\ a\ non-null\ Number\ value.\r\n\ <p>\r\n\ The\ NumericBinaryTree\ datatype\ is\ defined\ recursively\ as\r\n\ the\ empty\ tree\ or\r\n\ a\ rooted\ tree\ comprised\ of\ a\ value\ of\ type\ Number,\r\n\ a\ non-null\ reference\ to\ a\ left\ child\ of\ type\ NumericBinaryTree,\ and\r\n\ a\ non-null\ reference\ to\ a\ right\ child\ of\ type\ NumericBinaryTree.\r\n\ As\ this\ datatype\ represents\ a\ binary\ tree,\r\n\ there\ must\ be\ no\ duplicate\ references\ nor\ any\ references\r\n\ to\ the\ root.\r\n\ </p>\r\n\ <p>\r\n\ The\ empty\ tree\ is\ distinguished\ by\ the\ following\ properties\:<br>\r\n\ <code>isEmpty()\ \=\=\ true</code>,\ and<br>\r\n\ <code>height()\ \=\=\ -1</code>,<br>\r\n\ <code>numberOfNodes()\ \=\=\ 0</code>.<br>\r\n\ Further,\ the\ empty\ tree\ throws\ exceptions\ when\ any\ of\ the\ following\r\n\ methods\ is\ invoked\:<br>\r\n\ <code>getLeftChild()</code>,\r\n\ <code>getRightChild()</code>,\r\n\ <code>getValue()</code>,\r\n\ <code>isLeaf()</code>,\r\n\ <code>numberOfChildren()</code>,\r\n\ <code>numberOfLeaves()</code>,\r\n\ <code>setLeftChild()</code>,\r\n\ <code>setRightChild()</code>,\r\n\ <code>setValue()</code>.\r\n\ </p>\r\n\ <p>\r\n\ Every\ leaf\ node\ has\ the\ empty\ tree\ as\ its\ left\ child\r\n\ and\ the\ empty\ tree\ as\ its\ right\ child.\r\n\ </p>\r\n\ <p>\r\n\ Two\ binary\ trees\ are\ equal\ if\ and\ only\ if<br>\r\n\ (1)\ they\ have\ the\ same\ structure\ and<br>\r\n\ (2)\ respective\ elements\ stored\ at\ respective\ nodes\r\n\ in\ both\ trees\ are\ equal.<br>\r\n\ <small>[Walicki,\ M.,\ <i>Introduction\ to\ Mathematical\ Logic,</i>\r\n\ \ \ \ \ \ \ \ World\ Scientific,\ 2011]</small>\r\n\ </p>\r\n\ <p>&nbsp;</p>\r\n\ Terminology\:<ul>\r\n\ <li><em>ancestor</em>\ \=\ a\ parent,\ grandparent,\r\n\ \ \ \ \ \ \ \ great-grandparent,\ etc.</li>\r\n\ <li><em>descendant</em>\ \=\ a\ child,\ grandchild,\r\n\ \ \ \ \ \ \ \ great-grandchild,\ etc.</li>\r\n\ <li><em>height</em>\ \=\ the\ length\ of\ the\ longest\ downward\ path\ to\ a\ leaf</li>\r\n\ <li><em>internal</em>\ \=\ a\ tree\ with\ at\ least\ one\ child</li>\r\n\ <li><em>leaf</em>\ \=\ a\ tree\ with\ no\ children</li>\r\n\ <li><em>root</em>\ \=\ any\ NumericBinaryTree\ object</li>\r\n\ <li><em>tree</em>\ \=\ a\ NumericBinaryTree\ with\ all\ its\ descendants</li>\r\n\ <li><em>subtree\ of\ tree\ T</em>\ \=\ a\ tree\ whose\ root\ is\ within\ tree\ T</li>\r\n\ </ul>\r\n\ @author\ Dr.\ Jody\ Paul\r\n\ @version\ $Revision\:\ 11\ $\ ($LastChangedDate\:\ 2016-08-17\ 18\:17\:09\ -0600\ (Wed,\ 17\ Aug\ 2016)\ $)\r\n
comment1.params=
comment1.target=NumericBinaryTree\ emptyNumericBinaryTree()
comment1.text=\r\n\ Manages\ a\ singleton\ empty\ tree\ for\ leaf\ nodes.\r\n\ @return\ the\ common\ empty\ tree\r\n
comment10.params=
comment10.target=NumericBinaryTree\ getRightChild()
comment10.text=\r\n\ Returns\ the\ right\ child\ of\ this\ tree.\r\n\ @return\ the\ right\ child;\ null\ if\ no\ such\ child\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment11.params=value
comment11.target=void\ setValue(java.lang.Number)
comment11.text=\r\n\ Modifies\ the\ value\ of\ the\ root\ of\ this\ tree.\r\n\ @param\ value\ the\ new\ value\ for\ the\ root\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment12.params=child
comment12.target=void\ setLeftChild(NumericBinaryTree)
comment12.text=\r\n\ Replaces\ the\ left\ child\ of\ the\ root\ of\ this\ tree.\r\n\ @param\ child\ the\ new\ left\ child\ for\ this\ tree;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\ or\ empty\ tree\ indicates\ no\ child\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment13.params=child
comment13.target=void\ setRightChild(NumericBinaryTree)
comment13.text=\r\n\ Replaces\ the\ right\ child\ of\ the\ root\ of\ this\ tree.\r\n\ @param\ child\ the\ new\ right\ child\ for\ this\ tree;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\ or\ empty\ tree\ indicates\ no\ child\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment14.params=
comment14.target=int\ numberOfLeaves()
comment14.text=\r\n\ Determines\ the\ number\ of\ leaves\ of\ this\ tree.\r\n\ @return\ the\ number\ of\ leaves\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment15.params=
comment15.target=int\ height()
comment15.text=\r\n\ Determines\ the\ height\ of\ this\ tree.\r\n\ The\ height\ of\ a\ tree\ is\ the\ height\ of\ its\ root,\r\n\ which\ is\ the\ number\ of\ edges\ on\ the\ longest\ downward\ path\r\n\ between\ the\ root\ and\ a\ leaf.\r\n\ @return\ the\ height\ of\ this\ tree,\ -1\ if\ empty\r\n
comment16.params=obj
comment16.target=boolean\ equals(java.lang.Object)
comment16.text=\r\n\ Indicates\ whether\ some\ other\ object\ is\ "equal\ to"\ this\ one.\r\n\ @param\ obj\ the\ reference\ object\ with\ which\ to\ compare\r\n\ @return\ true\ if\ and\ only\ if\r\n\ \ <ul>\r\n\ \ \ \ <li>both\ are\ non-null</li>\r\n\ \ \ \ <li>both\ have\ the\ same\ number\ of\ subtrees</li>\r\n\ \ \ \ <li>both\ are\ the\ same\ height</li>\r\n\ \ \ \ <li>if\ non-empty,\ both\ have\ equal\ root\ values</li>\r\n\ \ \ \ <li>if\ left-children\ are\ present,\ they\ are\ equal\ to\ each\ other</li>\r\n\ \ \ \ <li>if\ right-children\ are\ present,\ they\ are\ equal\ to\ each\ other</li>\r\n\ \ </ul>\r\n\ @see\ \#hashCode()\r\n
comment17.params=
comment17.target=int\ hashCode()
comment17.text=\r\n\ Returns\ a\ hash\ code\ value\ for\ this\ tree.\r\n\ @return\ a\ hash\ code\ value\ for\ this\ tree\r\n\ @see\ \#equals(Object\ o)\r\n
comment18.params=
comment18.target=java.util.List\ preorderValues()
comment18.text=\r\n\ Returns\ a\ list\ of\ values\ in\ the\ order\ in\ which\r\n\ \ \ the\ nodes\ would\ be\ visited\ using\ preorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ values\ of\ all\ nodes\ in\ preorder\r\n
comment19.params=
comment19.target=java.util.List\ inorderValues()
comment19.text=\r\n\ Returns\ a\ list\ of\ values\ in\ the\ order\ in\ which\r\n\ \ \ the\ nodes\ would\ be\ visited\ using\ inorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ values\ of\ all\ nodes\ in\ inorder\r\n
comment2.params=
comment2.target=NumericBinaryTree()
comment2.text=\r\n\ Constructs\ an\ empty\ tree.\r\n
comment20.params=
comment20.target=java.util.List\ postorderValues()
comment20.text=\r\n\ Returns\ a\ list\ of\ values\ in\ the\ order\ in\ which\r\n\ \ \ the\ nodes\ would\ be\ visited\ using\ postorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ values\ of\ all\ nodes\ in\ postorder\r\n
comment21.params=
comment21.target=java.util.List\ preorderSubtrees()
comment21.text=\r\n\ Returns\ a\ list\ of\ subtrees\ in\ the\ order\ in\ which\r\n\ \ \ they\ would\ be\ visited\ using\ preorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ all\ subtrees\ in\ preorder\r\n
comment22.params=
comment22.target=java.util.List\ inorderSubtrees()
comment22.text=\r\n\ Returns\ a\ list\ of\ subtrees\ in\ the\ order\ in\ which\r\n\ \ \ they\ would\ be\ visited\ using\ inorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ all\ subtrees\ in\ inorder\r\n
comment23.params=
comment23.target=java.util.List\ postorderSubtrees()
comment23.text=\r\n\ Returns\ a\ list\ of\ subtrees\ in\ the\ order\ in\ which\r\n\ \ \ they\ would\ be\ visited\ using\ postorder\ traversal.\r\n\ \ \ If\ this\ tree\ is\ empty,\ returns\ the\ empty\ list.\r\n\ @return\ all\ subtrees\ in\ postorder\r\n
comment24.params=listOfTrees
comment24.target=java.util.List\ values(java.util.List)
comment24.text=\r\n\ Converts\ a\ list\ of\ trees\ into\ a\ list\ of\ the\r\n\ root\ values\ of\ those\ trees.\r\n\ \ \ If\ the\ parameter\ is\ an\ empty\ list,\ returns\ the\ empty\ list.\r\n\ @param\ listOfTrees\ the\ list\ of\ trees\ from\ which\ to\ extract\ values\r\n\ @return\ all\ root\ values\ in\ the\ order\ they\ appear\ in\ the\ parameter\r\n
comment25.params=
comment25.target=java.util.Iterator\ iterator()
comment25.text=\r\n\ Returns\ an\ iterator\ over\ the\ subtrees\ (nodes)\ of\ this\ tree.\r\n\ @return\ an\ iterator\ over\ subtrees\ of\ this\ tree\r\n
comment26.params=
comment26.target=java.lang.String\ toString()
comment26.text=\r\n\ Renders\ tree\ as\ a\ non-null\ and\ non-empty\ string.\r\n\ The\ rendering\ must\ include\ every\ value\ of\ the\ root\ of\r\n\ every\ subtree\ in\ the\ tree.\r\n\ It\ may\ include\ additional\ characters\ to\ provide\r\n\ human-readable\ results.\r\n\ @return\ string\ rendering\ of\ this\ object\r\n
comment27.params=level
comment27.target=java.lang.String\ indentedToString(int)
comment27.text=\r\n\ Provides\ indented\ multi-line\ rendering\ of\ tree.\r\n\ @param\ level\ the\ depth\ of\ this\ tree\ in\ overall\ rendering\r\n\ @return\ rendering\ of\ tree\ using\ multiple\ lines\ and\ indentation\r\n
comment28.params=filename
comment28.target=boolean\ save(java.lang.String)
comment28.text=\r\n\ Saves\ this\ tree\ to\ a\ file.\r\n\ @param\ filename\ the\ name\ of\ the\ file\ in\ which\ to\ save\ this\ tree;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ null,\ uses\ default\ file\ name\r\n\ @return\ <code>true</code>\ if\ successful\ save;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise\r\n\ @throws\ java.io.IOException\ if\ unexpected\ IO\ error\r\n
comment29.params=filename
comment29.target=boolean\ restore(java.lang.String)
comment29.text=\r\n\ Restores\ this\ tree\ from\ a\ file.\r\n\ <br><em>Postconditions\:</em>\r\n\ <blockquote>If\ successful,\ previous\ contents\ of\ this\ tree\ have\r\n\ been\ replaced\ by\ the\ contents\ of\ the\ file.\r\n\ If\ unsuccessful,\ content\ of\ the\ tree\ is\ unchanged.</blockquote>\r\n\ @param\ filename\ the\ name\ of\ the\ file\ from\ which\ to\ restore\ this\ tree;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ null,\ uses\ default\ file\ name\r\n\ @return\ <code>true</code>\ if\ successful\ restore;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise\r\n\ @throws\ java.io.IOException\ if\ unexpected\ IO\ error\r\n
comment3.params=rootvalue
comment3.target=NumericBinaryTree(java.lang.Number)
comment3.text=\r\n\ Constructs\ a\ tree\ with\ no\ children\r\n\ whose\ value\ is\ specified\ by\ the\ parameter.\r\n\ @param\ rootvalue\ the\ value\ stored\ at\ the\ root\ of\ the\ tree\r\n\ @throws\ IllegalArgumentException\ if\ parameter\ is\ null\r\n
comment30.params=nbt1\ nbt2
comment30.target=boolean\ compareTrees(NumericBinaryTree,\ NumericBinaryTree)
comment30.text=\r\n\ Utility\ that\ compares\ two\ trees\ for\ shape\ and\ contents.\r\n\ This\ private\ method\ behaves\ like\ an\ equals\ predicate\r\n\ except\ that\ it\ works\ only\ for\ NumericBinaryTree\ objects.\r\n\ @param\ nbt1\ first\ tree\ for\ comparison\r\n\ @param\ nbt2\ second\ tree\ for\ comparison\r\n\ @return\ true\ if\ and\ only\ if\ both\ are\ non-null,\r\n\ \ \ \ \ \ have\ the\ same\ number\ of\ nodes\ and\ same\ height,\r\n\ \ \ \ \ \ and\ if\ non-empty\ then\ also\ have\r\n\ \ \ \ \ \ equal\ root\ values,\ and\ if\ present\r\n\ \ \ \ \ \ both\ the\ left\ children\ and\ right\ children\r\n\ \ \ \ \ \ also\ return\ true\ to\ this\ predicate\r\n
comment4.params=rootvalue\ leftchild\ rightchild
comment4.target=NumericBinaryTree(java.lang.Number,\ NumericBinaryTree,\ NumericBinaryTree)
comment4.text=\r\n\ Constructs\ a\ tree\ with\ specified\ value,\r\n\ \ \ left\ child,\ and\ right\ child.\r\n\ @param\ rootvalue\ the\ value\ stored\ at\ the\ root\ of\ the\ tree\r\n\ @param\ leftchild\ the\ left\ child\ of\ the\ root;\r\n\ \ \ \ \ \ \ \ <code>null</code>\ if\ no\ such\ child\r\n\ @param\ rightchild\ the\ right\ child\ of\ the\ root;\r\n\ \ \ \ \ \ \ \ <code>null</code>\ if\ no\ such\ child\r\n\ @throws\ IllegalArgumentException\r\n\ \ \ \ \ \ \ \ \ if\ <code>rootvalue</code>\ parameter\ is\ null\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Empty\ tree\ predicate.\r\n\ @return\ <code>true</code>\ if\ this\ is\ an\ empty\ tree;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise\r\n
comment6.params=
comment6.target=int\ numberOfNodes()
comment6.text=\r\n\ Returns\ the\ number\ of\ nodes\ (subtrees)\ in\ this\ tree;\r\n\ \ \ 0\ if\ empty\ tree.\r\n\ @return\ the\ number\ of\ nodes\ (subtrees)\r\n
comment7.params=
comment7.target=boolean\ isLeaf()
comment7.text=\r\n\ Leaf\ predicate.\r\n\ @return\ <code>true</code>\ if\ this\ is\ a\ leaf;\r\n\ \ \ \ \ \ \ \ \ <code>false</code>\ otherwise.\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment8.params=
comment8.target=java.lang.Number\ getValue()
comment8.text=\r\n\ Returns\ the\ value\ of\ the\ root\ of\ this\ tree.\r\n\ @return\ the\ value\ of\ the\ root\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
comment9.params=
comment9.target=NumericBinaryTree\ getLeftChild()
comment9.text=\r\n\ Returns\ the\ left\ child\ of\ this\ tree.\r\n\ @return\ the\ left\ child;\ null\ if\ no\ such\ child\r\n\ @throws\ java.lang.NullPointerException\ if\ this\ tree\ is\ empty\r\n
numComments=31
